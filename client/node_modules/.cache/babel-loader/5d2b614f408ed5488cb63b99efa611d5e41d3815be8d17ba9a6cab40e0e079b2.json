{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Genres List\", -1 /* HOISTED */);\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"button\", {\n  type: \"submit\"\n}, \"Add Genre\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.genres, genre => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: genre.id\n    }, [_createTextVNode(_toDisplayString(genre.name) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.editGenre(genre)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteGenre(genre.id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))]), _createElementVNode(\"form\", {\n    onSubmit: _cache[1] || (_cache[1] = _withModifiers((...args) => $options.addGenre && $options.addGenre(...args), [\"prevent\"]))\n  }, [_withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.newGenre = $event),\n    placeholder: \"Enter genre name\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.newGenre]]), _hoisted_4], 32 /* HYDRATE_EVENTS */)]);\n}","map":{"version":3,"names":["_createElementVNode","type","_createElementBlock","_hoisted_1","_Fragment","_renderList","$data","genres","genre","key","id","name","onClick","$event","$options","editGenre","_hoisted_2","deleteGenre","_hoisted_3","onSubmit","_cache","_withModifiers","args","addGenre","newGenre","placeholder","_hoisted_4"],"sources":["C:\\Users\\vulln\\Desktop\\eStreaming\\client\\src\\components\\genres\\GenresList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Genres List</h2>\r\n      <ul>\r\n        <li v-for=\"genre in genres\" :key=\"genre.id\">\r\n          {{ genre.name }}\r\n          <button @click=\"editGenre(genre)\">Edit</button>\r\n          <button @click=\"deleteGenre(genre.id)\">Delete</button>\r\n        </li>\r\n      </ul>\r\n      <form @submit.prevent=\"addGenre\">\r\n        <input type=\"text\" v-model=\"newGenre\" placeholder=\"Enter genre name\" />\r\n        <button type=\"submit\">Add Genre</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchGenres, addGenre, editGenre, deleteGenre } from '../../api/genres';\r\n  \r\n  export default {\r\n    name: 'GenresList',\r\n    data() {\r\n      return {\r\n        genres: [],\r\n        newGenre: '',\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchGenres();\r\n    },\r\n    methods: {\r\n      fetchGenres() {\r\n        fetchGenres()\r\n          .then(response => {\r\n            this.genres = response;\r\n          })\r\n          .catch(error => {\r\n            console.error('Failed to fetch genres:', error);\r\n          });\r\n      },\r\n      addGenre() {\r\n        if (this.newGenre.trim() !== '') {\r\n          addGenre(this.newGenre)\r\n            .then(() => {\r\n              this.newGenre = '';\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to add genre:', error);\r\n            });\r\n        }\r\n      },\r\n      editGenre(genre) {\r\n        const newName = prompt('Enter new genre name:', genre.name);\r\n        if (newName !== null) {\r\n          editGenre(genre.id, newName)\r\n            .then(() => {\r\n              console.log('Genre edited successfully');\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to edit genre:', error);\r\n            });\r\n        }\r\n      },\r\n      deleteGenre(id) {\r\n        if (confirm('Are you sure you want to delete this genre?')) {\r\n          deleteGenre(id)\r\n            .then(() => {\r\n              console.log('Genre deleted successfully');\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to delete genre:', error);\r\n            });\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":";gCAEMA,mBAAA,CAAoB,YAAhB,aAAW;;;gCAUbA,mBAAA,CAAwC;EAAhCC,IAAI,EAAC;AAAQ,GAAC,WAAS;;;uBAXnCC,mBAAA,CAaM,cAZJC,UAAoB,EACpBH,mBAAA,CAMK,c,kBALHE,mBAAA,CAIKE,SAAA,QAAAC,WAAA,CAJeC,KAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAhBN,mBAAA,CAIK;MAJwBO,GAAG,EAAED,KAAK,CAACE;0CACnCF,KAAK,CAACG,IAAI,IAAG,GAChB,iBAAAX,mBAAA,CAA+C;MAAtCY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAC,SAAS,CAACP,KAAK;OAAG,MAAI,iBAAAQ,UAAA,GACtChB,mBAAA,CAAsD;MAA7CY,OAAK,EAAAC,MAAA,IAAEC,QAAA,CAAAG,WAAW,CAACT,KAAK,CAACE,EAAE;OAAG,QAAM,iBAAAQ,UAAA,E;oCAGjDlB,mBAAA,CAGO;IAHAmB,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAAAC,cAAA,KAAAC,IAAA,KAAUR,QAAA,CAAAS,QAAA,IAAAT,QAAA,CAAAS,QAAA,IAAAD,IAAA,CAAQ;sBAC7BtB,mBAAA,CAAuE;IAAhEC,IAAI,EAAC,MAAM;+DAAUK,KAAA,CAAAkB,QAAQ,GAAAX,MAAA;IAAEY,WAAW,EAAC;iDAAtBnB,KAAA,CAAAkB,QAAQ,E,GACpCE,UAAwC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}