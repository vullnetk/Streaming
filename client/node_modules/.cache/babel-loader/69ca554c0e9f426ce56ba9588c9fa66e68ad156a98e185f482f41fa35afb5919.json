{"ast":null,"code":"import { fetchGenres, addGenre, editGenre, deleteGenre } from '../../api/genres';\nexport default {\n  name: 'GenresList',\n  data() {\n    return {\n      genres: [],\n      newGenre: ''\n    };\n  },\n  mounted() {\n    this.fetchGenres();\n  },\n  methods: {\n    fetchGenres() {\n      fetchGenres().then(response => {\n        this.genres = response;\n      }).catch(error => {\n        console.error('Failed to fetch genres:', error);\n      });\n    },\n    addGenre() {\n      if (this.newGenre.trim() !== '') {\n        addGenre(this.newGenre).then(() => {\n          this.newGenre = '';\n          this.fetchGenres();\n        }).catch(error => {\n          console.error('Failed to add genre:', error);\n        });\n      }\n    },\n    editGenre(genre) {\n      const newName = prompt('Enter new genre name:', genre.name);\n      if (newName !== null) {\n        editGenre(genre.id, newName).then(() => {\n          console.log('Genre edited successfully');\n          this.fetchGenres();\n        }).catch(error => {\n          console.error('Failed to edit genre:', error);\n        });\n      }\n    },\n    deleteGenre(id) {\n      if (confirm('Are you sure you want to delete this genre?')) {\n        deleteGenre(id).then(() => {\n          console.log('Genre deleted successfully');\n          this.fetchGenres();\n        }).catch(error => {\n          console.error('Failed to delete genre:', error);\n        });\n      }\n    }\n  }\n};","map":{"version":3,"names":["fetchGenres","addGenre","editGenre","deleteGenre","name","data","genres","newGenre","mounted","methods","then","response","catch","error","console","trim","genre","newName","prompt","id","log","confirm"],"sources":["C:\\Users\\vulln\\Desktop\\eStreaming\\client\\src\\views\\genres\\GenresList.vue"],"sourcesContent":["<template>\r\n    <div>\r\n      <h2>Genres List</h2>\r\n      <ul>\r\n        <li v-for=\"genre in genres\" :key=\"genre.id\">\r\n          {{ genre.name }}\r\n          <button @click=\"editGenre(genre)\">Edit</button>\r\n          <button @click=\"deleteGenre(genre.id)\">Delete</button>\r\n        </li>\r\n      </ul>\r\n      <form @submit.prevent=\"addGenre\">\r\n        <input type=\"text\" v-model=\"newGenre\" placeholder=\"Enter genre name\" />\r\n        <button type=\"submit\">Add Genre</button>\r\n      </form>\r\n    </div>\r\n  </template>\r\n  \r\n  <script>\r\n  import { fetchGenres, addGenre, editGenre, deleteGenre } from '../../api/genres';\r\n  \r\n  export default {\r\n    name: 'GenresList',\r\n    data() {\r\n      return {\r\n        genres: [],\r\n        newGenre: '',\r\n      };\r\n    },\r\n    mounted() {\r\n      this.fetchGenres();\r\n    },\r\n    methods: {\r\n      fetchGenres() {\r\n        fetchGenres()\r\n          .then(response => {\r\n            this.genres = response;\r\n          })\r\n          .catch(error => {\r\n            console.error('Failed to fetch genres:', error);\r\n          });\r\n      },\r\n      addGenre() {\r\n        if (this.newGenre.trim() !== '') {\r\n          addGenre(this.newGenre)\r\n            .then(() => {\r\n              this.newGenre = '';\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to add genre:', error);\r\n            });\r\n        }\r\n      },\r\n      editGenre(genre) {\r\n        const newName = prompt('Enter new genre name:', genre.name);\r\n        if (newName !== null) {\r\n          editGenre(genre.id, newName)\r\n            .then(() => {\r\n              console.log('Genre edited successfully');\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to edit genre:', error);\r\n            });\r\n        }\r\n      },\r\n      deleteGenre(id) {\r\n        if (confirm('Are you sure you want to delete this genre?')) {\r\n          deleteGenre(id)\r\n            .then(() => {\r\n              console.log('Genre deleted successfully');\r\n              this.fetchGenres();\r\n            })\r\n            .catch(error => {\r\n              console.error('Failed to delete genre:', error);\r\n            });\r\n        }\r\n      },\r\n    },\r\n  };\r\n  </script>\r\n  "],"mappings":"AAkBE,SAASA,WAAW,EAAEC,QAAQ,EAAEC,SAAS,EAAEC,WAAU,QAAS,kBAAkB;AAEhF,eAAe;EACbC,IAAI,EAAE,YAAY;EAClBC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,MAAM,EAAE,EAAE;MACVC,QAAQ,EAAE;IACZ,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACR,IAAI,CAACR,WAAW,CAAC,CAAC;EACpB,CAAC;EACDS,OAAO,EAAE;IACPT,WAAWA,CAAA,EAAG;MACZA,WAAW,CAAC,EACTU,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAACL,MAAK,GAAIK,QAAQ;MACxB,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACjD,CAAC,CAAC;IACN,CAAC;IACDZ,QAAQA,CAAA,EAAG;MACT,IAAI,IAAI,CAACM,QAAQ,CAACQ,IAAI,CAAC,MAAM,EAAE,EAAE;QAC/Bd,QAAQ,CAAC,IAAI,CAACM,QAAQ,EACnBG,IAAI,CAAC,MAAM;UACV,IAAI,CAACH,QAAO,GAAI,EAAE;UAClB,IAAI,CAACP,WAAW,CAAC,CAAC;QACpB,CAAC,EACAY,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC9C,CAAC,CAAC;MACN;IACF,CAAC;IACDX,SAASA,CAACc,KAAK,EAAE;MACf,MAAMC,OAAM,GAAIC,MAAM,CAAC,uBAAuB,EAAEF,KAAK,CAACZ,IAAI,CAAC;MAC3D,IAAIa,OAAM,KAAM,IAAI,EAAE;QACpBf,SAAS,CAACc,KAAK,CAACG,EAAE,EAAEF,OAAO,EACxBP,IAAI,CAAC,MAAM;UACVI,OAAO,CAACM,GAAG,CAAC,2BAA2B,CAAC;UACxC,IAAI,CAACpB,WAAW,CAAC,CAAC;QACpB,CAAC,EACAY,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C,CAAC,CAAC;MACN;IACF,CAAC;IACDV,WAAWA,CAACgB,EAAE,EAAE;MACd,IAAIE,OAAO,CAAC,6CAA6C,CAAC,EAAE;QAC1DlB,WAAW,CAACgB,EAAE,EACXT,IAAI,CAAC,MAAM;UACVI,OAAO,CAACM,GAAG,CAAC,4BAA4B,CAAC;UACzC,IAAI,CAACpB,WAAW,CAAC,CAAC;QACpB,CAAC,EACAY,KAAK,CAACC,KAAI,IAAK;UACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;QACjD,CAAC,CAAC;MACN;IACF;EACF;AACF,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}